
// --------------------------------------------------
// Arrange

// Assumes that TestUtil.js has already been loaded

var a0 = JL.createDummyAppender('da1');
JL().setOptions({ "appenders": [a0] });

// --------------------------------------------------

// Built in exception

function fa() {
    try {
        i.xxx.yyy = 'not declared exception';
    }
    catch (e) {
        JL('l1').fatalException(null, e);
        __timestamp1 = (new Date).getTime();
    }

    TestUtils.Check(a0, 1, [
      {
          l: 6000,
          m: /{\"stack\":\"fa@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{2}\\n@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,4}.*\",\"message\":\"i is not defined\",\"name\":\"ReferenceError\",\"logData\":\"null\"}/,
          n: 'l1',
          t: __timestamp1
      }
    ]
    );
}

// JL.Exception 

function fb() {
    try {
        throw new JL.Exception("throwing JL.Exception");
    }
    catch (e) {
        JL('l2').fatalException({ "i": 5, "j": "abc" }, e);
        __timestamp2 = (new Date).getTime();
    }

    TestUtils.Check(a0, 2, [
      {
          l: 6000,
          m: /{\"stack\":\"@http:\/\/localhost:\d{5}\/Scripts\/libs\/jsnlog.js:\d{1,4}\\n@http:\/\/localhost:\d{5}\/Scripts\/libs\/jsnlog.js:\d{1,4}\\n\",\"message\":\"throwing JL.Exception\",\"name\":\"JL.Exception\",\"logData\":\"{\\\"i\\\":5,\\\"j\\\":\\\"abc\\\"}\"}/,
          n: 'l2',
          t: __timestamp2
      }
    ]
    );
}

// Exception not derived from Error

function fc() {
    try {
        throw "Not derived from Error";
    }
    catch (e) {
        JL('l3').fatalException(function () { return { "i2": 66, "j2": "def" } }, e);
        __timestamp3 = (new Date).getTime();
    }

    TestUtils.Check(a0, 3, [
      {
          l: 6000,
          m: /{\"e\":\"Not derived from Error\",\"logData\":\"{\\\"i2\\\":66,\\\"j2\\\":\\\"def\\\"}\"}/,
          n: 'l3',
          t: __timestamp3
      }
    ]
    );
}

// -----------------------------

function f1() {
    i.xxx.yyy = 'not declared exception in f1';
}

function f2() {
    try {
        f1();
    }
    catch (e) {
        throw new JL.Exception({ "i3": 77, "j3": "ghi" }, e);
    }
}

// Add data and inner

function fd() {
    try {
        f2();
    }
    catch (e) {
        JL('l4').fatalException(function () { return { "i4": 88, "j4": "jkl" } }, e);
        __timestamp4 = (new Date).getTime();
    }

    TestUtils.Check(a0, 4, [
      {
          l: 6000,
          m: /{\"stack\":\"@http:\/\/localhost:\d{5}\/Scripts\/libs\/jsnlog.js:\d{1,5}\\n@http:\/\/localhost:\d{5}\/Scripts\/libs\/jsnlog.js:\d{1,5}\\n\",\"message\":\"{\\\"i3\\\":77,\\\"j3\\\":\\\"ghi\\\"}\",\"name\":\"JL\.Exception\",\"inner\":{\"stack\":\"f1@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}\\nf2@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}\\nfd@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}\\n@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}.*\",\"message\":\"i is not defined\",\"name\":\"ReferenceError\"},\"logData\":\"{\\\"i4\\\":88,\\\"j4\\\":\\\"jkl\\\"}\"}/,
          n: 'l4',
          t: __timestamp4
      }
    ]
    );

    // Add inner exception, but no data

    try {
        f2();
    }
    catch (e) {
        JL('l5').fatalException(null, e);
        __timestamp5 = (new Date).getTime();
    }

    TestUtils.Check(a0, 5, [
      {
          l: 6000,
          m: /{\"stack\":\"@http:\/\/localhost:\d{5}\/Scripts\/libs\/jsnlog.js:\d{1,5}\\n@http:\/\/localhost:\d{5}\/Scripts\/libs\/jsnlog.js:\d{1,5}\\n\",\"message\":\"{\\\"i3\\\":77,\\\"j3\\\":\\\"ghi\\\"}\",\"name\":\"JL\.Exception\",\"inner\":{\"stack\":\"f1@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}\\nf2@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}\\nfd@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}\\n@http:\/\/localhost:\d{5}\/Scripts\/exceptiontests.js:\d{1,5}.*\",\"message\":\"i is not defined\",\"name\":\"ReferenceError\"},\"logData\":\"null\"}/,
          n: 'l5',
          t: __timestamp5
      }
    ]
    );
}

// --------------------------------------------------
// Act and Assert

$(function () {
    fa();
    fb();
    fc();
    fd();

    // The integration tests looks not only for error messages (generated by TestUtils) but also 
    // whether the #running message is still on the page (indicating that the test code crashed).
    $('#running').remove();
});





