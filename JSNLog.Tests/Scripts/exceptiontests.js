
// --------------------------------------------------
// Arrange

// Assumes that TestUtil.js has already been loaded

var a0 = JL.createDummyAppender('da1');
JL().setOptions({ "appenders": [a0] });

// --------------------------------------------------
// Act

// Built in exception

function fa() {
    try {
        i.xxx.yyy = 'not declared exception';
    }
    catch (e) {
        JL('l1').fatalException(null, e);
        __timestamp1 = (new Date).getTime();
    }
}

// JL.Exception 

function fb() {
    try {
        throw new JL.Exception(null, "throwing JL.Exception");
    }
    catch (e) {
        JL('l2').fatalException({ "i": 5, "j": "abc" }, e);
        __timestamp2 = (new Date).getTime();
    }
}

// Exception not derived from Error

function fc() {
    try {
        throw "Not derived from Error";
    }
    catch (e) {
        JL('l3').fatalException(function () { return { "i2": 66, "j2": "def" } }, e);
        __timestamp3 = (new Date).getTime();
    }
}

// -----------------------------

function f1() {
    i.xxx.yyy = 'not declared exception in f1';
}

function f2() {
    try {
        f1();
    }
    catch (e) {
        throw new JL.Exception("special exception", "in f2", { "i3": 77, "j3": "ghi" }, e);
    }
}

// Add data and inner

function fd() {
    try {
        f2();
    }
    catch (e) {
        JL('l4').fatalException(function () { return { "i4": 88, "j4": "jkl" } }, e);
        __timestamp4 = (new Date).getTime();
    }


    // Add inner exception, but no data

    try {
        f2();
    }
    catch (e) {
        JL('l5').fatalException(null, e);
        __timestamp5 = (new Date).getTime();
    }
}

// --------------------------------------------------
// Assert

function fassert() {
    TestUtils.Check(a0, 1, [
      {
          l: 6000,
          m: '{"stack":"ReferenceError: i is not defined\n    at http://localhost:31972/Scripts/exceptiontests.js:19:5","message":"i is not defined","name":"ReferenceError","logData":"null"}',
          n: 'l1',
          t: __timestamp1
      },
      {
          l: 6000,
          m: '{"stack":"Error\n    at JL (http://localhost:31972/Scripts/libs/jsnlog.js:231:27)\n    at http://localhost:31972/Scripts/libs/jsnlog.js:674:3","message":"throwing JL.Exception","name":"Exception","logData":"{\"i\":5,\"j\":\"abc\"}"}',
          n: 'l2',
          t: __timestamp2
      },
      {
          l: 6000,
          m: '{"e":"Not derived from Error","logData":"{\"i2\":66,\"j2\":\"def\"}"}',
          n: 'l3',
          t: __timestamp3
      },
      {
          l: 6000,
          m: '{"stack":"ReferenceError: Exception is not defined\n    at f2 (http://localhost:31972/Scripts/exceptiontests.js:62:19)\n    at http://localhost:31972/Scripts/exceptiontests.js:67:5","message":"Exception is not defined","name":"ReferenceError","logData":"{\"i4\":88,\"j4\":\"jkl\"}"}',
          n: 'l4',
          t: __timestamp4
      },
      {
          l: 6000,
          m: '{"stack":"ReferenceError: Exception is not defined\n    at f2 (http://localhost:31972/Scripts/exceptiontests.js:62:19)\n    at http://localhost:31972/Scripts/exceptiontests.js:78:5","message":"Exception is not defined","name":"ReferenceError","logData":"null"}',
          n: 'l5',
          t: __timestamp5
      }
    ]
    );

    // The integration tests looks not only for error messages (generated by TestUtils) but also 
    // whether the #running message is still on the page (indicating that the test code crashed).
    $('#running').remove();
}


$(function () {
    fa();
    fb();
    fc();
    fd();
    fassert();
});





