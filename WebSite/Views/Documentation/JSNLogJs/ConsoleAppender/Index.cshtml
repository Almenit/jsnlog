@using ViewExtensions

@{
    ViewBag.Title = "ConsoleAppender Object";
    ViewBag.Key = "jsnlogjs-consoleappender";
    ViewBag.Description = "Allows loggers to send log items to the console.";
}

@section Remarks {
    <p>
        JSNLog is based on the idea of integrating client side and server side logging - using the
        @Html.ViewLink("jsnlogjs-ajaxappender") to send log items to the server.
    </p>
    <p>
        However, during development is can be useful to simply send log items to the
        console provided by the F12 developer tools in
        <a href="https://developers.google.com/chrome-developer-tools/docs/console" target="_blank">Chrome</a>,
        <a href="http://getfirebug.com/" target="_blank">Firefox</a>
        and
        <a href="" target="_blank">Internet Explorer</a>.
    </p>
    <p>
        That way, the log items appear immediately below your main browser window, so you don't have to check the server side log.
    </p>
    <h3>Sending log items from a logger to the console</h3>
    <p>
        To see the log items that are generated by a logger in the console, you first create a ConsoleAppender and then call the
        @Html.ViewLink("jsnlogjs-logger-setOptions")
        on the logger to
        send all log items to that ConsoleAppender:
    </p>

<pre>// "mylogger" logs to just the console
var consoleAppender=JL.createConsoleAppender('consoleAppender');
JL("mylogger").setOptions({"appenders": [consoleAppender]});
</pre>

    <p>
        However, this means that all log items will only go to the console, and no longer to the server.
        If you want the log items to go to both the console and the server,
        send them to an AjaxAppender as well as to a ConsoleAppender:
    </p>

<pre>// "mylogger" logs to both the server and the console
var ajaxAppender=JL.createAjaxAppender('ajaxAppender');
var consoleAppender=JL.createConsoleAppender('consoleAppender');
JL("mylogger").setOptions({"appenders": [ajaxAppender,consoleAppender]});
</pre>

<h3>Sending log items from every logger to both the console and the server</h3>
    <p>
        It may be easiest to get all loggers to log to both the console and the server.
        You can achieve this by calling the
        @Html.ViewLink("jsnlogjs-logger-setOptions")
        on the root logger. Through
        @Html.ViewLink("jsnlogjs-logger-setOptions", "inheritance", fragment: "inheritance"),
        every other logger will start logging to both the console and the server as well.
    </p>

<pre>// Debugging: all loggers log to both the server and the console
var ajaxAppender=JL.createAjaxAppender('ajaxAppender');
var consoleAppender=JL.createConsoleAppender('consoleAppender');
JL().setOptions({"appenders": [ajaxAppender,consoleAppender]});
</pre>

<h3>Switching off logging to the console</h3>
    <p>
        In production, you can switch off all logging to the console by removing the ConsoleAppender:
    </p>

<pre>// Production: loggers log to the server only
var ajaxAppender=JL.createAjaxAppender('ajaxAppender');
JL().setOptions({"appenders": [ajaxAppender]});
</pre>
    <p>
        This means you don't have to go through your code to remove logging code - a simple change in one place is enough.
    </p>








}
