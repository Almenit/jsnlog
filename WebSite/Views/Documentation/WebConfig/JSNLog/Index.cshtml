@using ViewExtensions

@{
    ViewBag.Title = "<jsnlog> Element";
    ViewBag.Key = "webconfig-jsnlog";
    ViewBag.Description = "The root element for all JSNLog configuration elements.";
    Layout = "~/Views/Shared/_ElementLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

@section Definition {
<pre>&lt;configuration&gt; 
    &lt;jsnlog
        enabled="true|false"
        maxMessages="number"
        serverSideLogger="string"
        serverSideLevel="number|TRACE|DEBUG|INFO|WARN|ERROR|FATAL" 
        serverSideMessageFormat="string"
        productionLibraryPath="string" &gt;

    &lt;/jsnlog&gt;
&lt;/configuration&gt; 
</pre>
}

@section Remarks {
    <p>
    The &lt;jsnlog&gt; element can have the following attributes: 
        </p>

    <table class="border">
        @Html.Partial("_OptionsTableHeading",new ViewDataDictionary { 
            { "configSource", "web.config"} 
        })
        <tbody>
        @Html.TableRowHtml("enabled", "optional", "true",
            @"If false, all loggers are disabled.")
        @Html.TableRowHtml("maxMessages", "optional", "no maximum", "Limits total number of messages sent to the server. See remarks below.")
        @Html.TableRowHtml("serverSideLogger", "optional", "(empty)",
            @"By default, all log messages from your JavaScript code are passed on to your server side logging package 
with the name of the JavaScript logger.
<p/>
However, if you want to use a specific logger name for all your JavaScript log messages, you can specify that with this attribute.")
        @Html.TableRowHtml("serverSideLevel", "optional", "(empty)",
            @"By default, all log messages from your JavaScript code are passed on to your server side logging package with the same level as the original JavaScript log message.
<p/>
However, if you want to use a specific level, you can specify that with this attribute.")
        @Html.TableRowHtml("serverSideMessageFormat", "optional", "%message",
            @"See remarks.")
        @Html.TableRowHtml("productionLibraryPath", "optional", "(empty)",
            @"Path to the jsnlog.js file. JSNLog generates a &lt;script&gt; tag with this url.
<p/>
If you do not specify this, JSNLog will not generate the &lt;script&gt; tag. 
This makes sense if you for example combine jsnlog.js with your other 
JavaScript files and you use your own &lt;script&gt; tag to load this combined file.")
        </tbody>
    </table>

    @Html.Partial("_MaxMessagesRemarks",new ViewDataDictionary { 
        { "configSource", "web.config"}, 
    })

    <h3>serverSideMessageFormat</h3>

        <p>
    Your server not only receives the the original message passed into the JavaScript logger, 
        but also the logger, the level, a timestamp, etc.
        </p>
    <p>
You can choose to have this additional information logged on the server along with 
        the original message, by setting <span class="term">serverSideMessageFormat</span> to a format string with
        one or more place holders:
        </p>

        <table class="border">
        <thead>
            <tr>
                <th>Place holder</th>
                <th>Is replaced by</th>
            </tr>
        </thead>
        <tbody>
    <tr valign="top">
    <td>%message</td>
    <td>Original message given to the JavaScript logger</td>
    </tr>
    <tr valign="top">
    <td>%utcDate</td>
    <td>Date and time in UTC when the message was generated, according to the client's clock</td>
    </tr>
    <tr valign="top">
    <td>%utcDateServer</td>
    <td>Date and time in UTC when the message was received by the server, according to the server's clock</td>
    </tr>
    <tr valign="top">
    <td>%date</td>
    <td>Date and time when the message was generated, according to the client's clock. 
        This equals %utcDate converted to the server's local time.</td>
    </tr>
    <tr valign="top">
    <td>%dateServer</td>
    <td>Date and time in the server's local time when the message was received by the server, according to the server's clock</td>
    </tr>
    <tr valign="top">
    <td>%level</td>
    <td>Level of the message, as provided by the JavaScript code</td>
    </tr>
    <tr valign="top">
    <td>%userAgent</td>
    <td>Identifies the make of the browser</td>
    </tr>
    <tr valign="top">
    <td>%userHostAddress</td>
    <td>IP address of the sender</td>
    </tr>
    <tr valign="top">
    <td>%url</td>
    <td>Url of the page on which the message was generated</td>
    </tr>
    <tr valign="top">
    <td>%logger</td>
    <td>JavaScript logger that generated the message</td>
    </tr>
    <tr valign="top">
    <td>%requestId</td>
    <td>Identifies the request for which the log message was created. 
        <p />
        If you configure your JavaScript 
        loggers in web.config, this request id will be generated for you. Otherwise, set this request id
        using the
                    @Html.ViewLink("jsnlogjs-jl-setOptions", "JL.setOptions")
 method.
    </td>
    </tr>
    <tr valign="top">
    <td>%newline*</td>
    <td>Newline character</td>
    </tr>
        </tbody>
    </table>
    *<small> If you use Elmah, %newline won't result in a newline in the elmah.axd page, because Elmah doesn't convert line breaks in log messages to HTML &lt;br /&gt; tags.</small>
}

@section Examples {
<p>
    This shows the date and time that the log message was created on the client as well as the user agent
    in each log message.
</p>
<pre>&lt;jsnlog 
    serverSideMessageFormat="Sent: %date, Brower: %userAgent - %message" &gt;</pre>

    <p>
        This processes all client side JavaScript log messages via the server side logger "jslogger".
    </p>
    <pre>&lt;jsnlog serverSideLogger="jslogger"&gt;</pre>

    <p>
        This disables all JavaScript loggers.
    </p>
    <pre>&lt;jsnlog enabled="false"&gt;</pre>


}





