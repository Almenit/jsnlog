@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "Download/Installation";
    ViewBag.Key = "downloadinstall";
    ViewBag.Description = "How to download and install JSNLog.";
}

@if (PageVersions.CurrentVersion() == "NetJs")
{

    @*
        --------------------------------------------------------------------------
        If the url or the hash tag of the additional config steps ever changes,
        also change the Nuget readme file
        --------------------------------------------------------------------------
    *@

    @*
        ---------------------------------------------------------
        The hash "additional" is used in the Nuget readme file
        ---------------------------------------------------------
    *@
    <a name="additional"></a>
    <h2>1. Install JSNLog plus configuration for your logging package</h2>

    <p>
        The NuGet packages below install JSNLog itself, plus the configuration needed  for it to work with your specific
        logging package.
    </p>

    <ol type="a">
        <li>
            Load your solution in Visual Studio,
            and open the Package Manager Console: <i>Tools</i> | <i>Library Package Manager</i> | <i>Package Manager Console</i>.
            <p />
        </li>
        <li>
            Enter the NuGet package at the PM> prompt to install JSNLog plus configuration for your logging package:
        </li>
    </ol>

    <table class="border">
        <tr>
            <th>Logging Package</th>
            <th>NuGet package</th>
        </tr>
        <tr>
            <td><a href="http://logging.apache.org/log4net/">Log4Net</a></td>
            <td><pre>Install-Package JSNLog.Log4Net</pre></td>
        </tr>
        <tr>
            <td><a href="http://nlog-project.org/">NLog</a></td>
            <td><pre>Install-Package JSNLog.NLog</pre></td>
        </tr>
        <tr>
            <td><a href="https://code.google.com/p/elmah/">Elmah</a></td>
            <td><pre>Install-Package JSNLog.Elmah</pre></td>
        </tr>
        <tr>
            <td><a href="http://netcommon.sourceforge.net/">Common.Logging</a></td>
            <td><pre>Install-Package JSNLog.CommonLogging</pre></td>
        </tr>
    </table>

    <p>
        If your logging package is not listed here, install the version for Common.Logging and
        then install a Common.Logging
        <a href="http://www.nuget.org/packages?q=Common.Logging">adapter for your logging package</a>.
    </p>

    @*
        ---------------------------------------------------------
        The hash "addtoyourpages" is used in the Nuget readme file
        ---------------------------------------------------------
    *@
    <a name="addtoyourpages"></a>
    <h2>2. Add JSNLog to your pages</h2>

    <p>
        Call JSNLog's
        @Html.ViewLink("javascriptlogging-configure", "Configure")
        method in your pages, before any script tags that load JavaScript
        that use JSNLog loggers.
    </p>
    <ul>
        <li>
            <b>For Razor (MVC3+)</b>, use:
<pre>@@Html.Raw(JSNLog.JavascriptLogging.Configure())
... your &lt;script&gt; tags</pre>
            <p>
                Your _Layout.cshtml or _Layout.vbhtml would probably be a good place for this.
            </p>
        </li>
        <li>
            <b>For WebForms</b>, use:
<pre>&lt;%= JSNLog.JavascriptLogging.Configure() %&gt;
... your &lt;script&gt; tags</pre>
            <p>
                Your master page would probably be a good place for this.
            </p>
        </li>
    </ul>

    <h2>3. Feedback</h2>
    <p>
        Any praise, constructive criticism or ideas for improvement are welcome. Please leave it
        <a href="https://github.com/mperdeck/jsnlog/issues?state=open">here</a>.
    </p>
        <p>
            <h2>
                4. @Html.ViewLink("getstartedlogging", "Start logging >>")
            </h2>
        </p>
}

        @*====================================================================================================*@
        @* JS Only *@
        @*====================================================================================================*@

        @if (PageVersions.CurrentVersion() == "JsOnly")
        {
            <p>
                <small>If you use .Net, <a href="@PageVersions.UrlWithVersionUrlName("netjs")">click here</a>.</small>
            </p>

            <p>
                Firstly, <a href="@SiteConstants.DownloadLinkJsnlogJs" target="_blank">download jsnlog.js</a> and add it to your site.
            </p>

            <p>
                The second step is to let your server receive log messages from jsnlog.js. Two things are in play here:
            </p>
            <ol>
                <li>The URL where you will receive log messages;</li>
                <li>The format of the log messages.</li>
            </ol>

            <h2>URL where you will receive log messages</h2>

            <p>
                The built in AJAX appender by default sends all log messages to this url:
            </p>
            <pre>jsnlog.logger</pre>

            <p>
                You can change this using the
                @Html.ViewLink("jsnlogjs-ajaxappender-setOptions")<text>.</text>
            </p>

            <h2>Format of the log messages</h2>
            <p>
                The AJAX appender sends messages as JSON strings, in this format:
            </p>
            <pre>{
    r:  "request id", // may not be present
    lg: [
        { l: level, m: 'message', n: 'logger name', t: timestamp },
        ...
    ]
}</pre>

            <p>
                Some less obvious things about this format:
            </p>
            <ul>
                <li>
                    The "r" field (containing the request id) will only be present in the message if the request id has been set
                    (using the JL
                    @Html.ViewLink("jsnlogjs-jl-setOptions")<text>).</text> Be sure that your code doesn't crash
                    if that field is not in the message.
                    <p />
                </li>
                <li>
                    A single JSON message to the server can contain multiple log messages. This is because the AJAX appender can be configured
                    to batch messages, for example 2 log messages per JSON message to the server.
                </li>
            </ul>
            <p>
                About the individual fields:
            </p>
            <table class="border">
                <tr valign="top">
                    <th>Field</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td valign="top">
                        request id
                    </td>
                    <td>
                        Identifies the current request. You can set this on the server while generating the page using the JL
                        @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
                        <p />
                        Use this feature to see which log message belong to the same request.
                        This feauture is optional, so no need to worry about it.
                    </td>
                </tr>
                <tr>
                    <td valign="top">
                        level
                    </td>
                    <td>
                        Severity of the log message. This is a number. See below.
                    </td>
                </tr>
                <tr>
                    <td valign="top">
                        message
                    </td>
                    <td>
                        Message to be logged.
                    </td>
                </tr>
                <tr>
                    <td valign="top">
                        logger&nbsp;name
                    </td>
                    <td>
                        Name of the logger.
                    </td>
                </tr>
                <tr>
                    <td valign="top">
                        timestamp
                    </td>
                    <td>
                        The time the message was logged by your JavaScript.
                        This is the number of milliseconds since 1 January 1970 00:00:00 UTC, according to the client machine's clock.
                    </td>
                </tr>
            </table>

            <p>
                Levels translate to the more common TRACE, DEBUG, ..., FATAL as follows:
            </p>

            <table class="border">
                <tr valign="top">
                    <th>Named Severity</th>
                    <th>Level</th>
                </tr>
                <tr>
                    <td valign="top">
                        TRACE
                    </td>
                    <td>
                        1000
                    </td>
                </tr>

                <tr>
                    <td valign="top">
                        DEBUG
                    </td>
                    <td>
                        2000
                    </td>
                </tr>

                <tr>
                    <td valign="top">
                        INFO
                    </td>
                    <td>
                        3000
                    </td>
                </tr>

                <tr>
                    <td valign="top">
                        WARN
                    </td>
                    <td>
                        4000
                    </td>
                </tr>

                <tr>
                    <td valign="top">
                        ERROR
                    </td>
                    <td>
                        5000
                    </td>
                </tr>

                <tr>
                    <td valign="top">
                        FATAL
                    </td>
                    <td>
                        6000
                    </td>
                </tr>
            </table>


        }

