@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "Download/Installation";
    ViewBag.Key = "downloadinstall";
    ViewBag.Description = "How to download and install JSNLog.";

    string currentVersion = PageVersions.CurrentVersion();
}

@if (currentVersion == "NetJs")
{

    @*
        --------------------------------------------------------------------------
        If the url or the hash tag of the additional config steps ever changes,
        also change the Nuget readme file
        --------------------------------------------------------------------------
    *@

    @*
        ---------------------------------------------------------
        The hash "additional" is used in the Nuget readme file
        ---------------------------------------------------------
    *@
    <a name="additional"></a>
    <h2>1. Install JSNLog plus configuration for your logging package</h2>

    <p>
        The NuGet packages below install JSNLog itself, plus the configuration needed  for it to work with your specific
        logging package.
    </p>

    <ol type="a">
        <li>
            Load your solution in Visual Studio,
            and open the Package Manager Console: <i>Tools</i> | <i>Library Package Manager</i> | <i>Package Manager Console</i>.
            <p />
        </li>
        <li>
            Enter the NuGet package at the PM> prompt to install JSNLog plus configuration for your logging package:
        </li>
    </ol>

    <table class="border">
        <tr>
            <th>Logging Package</th>
            <th>NuGet package</th>
        </tr>
        <tr>
            <td><a href="http://logging.apache.org/log4net/">Log4Net</a></td>
            <td><pre>Install-Package JSNLog.Log4Net</pre></td>
        </tr>
        <tr>
            <td><a href="http://nlog-project.org/">NLog</a></td>
            <td><pre>Install-Package JSNLog.NLog</pre></td>
        </tr>
        <tr>
            <td><a href="https://code.google.com/p/elmah/">Elmah</a></td>
            <td><pre>Install-Package JSNLog.Elmah</pre></td>
        </tr>
        <tr>
            <td><a href="http://netcommon.sourceforge.net/">Common.Logging</a></td>
            <td><pre>Install-Package JSNLog.CommonLogging</pre></td>
        </tr>
    </table>

    <p>
        If your logging package is not listed here, install the version for Common.Logging and
        then install a Common.Logging
        <a href="http://www.nuget.org/packages?q=Common.Logging">adapter for your logging package</a>.
    </p>

    @*
        ---------------------------------------------------------
        The hash "addtoyourpages" is used in the Nuget readme file
        ---------------------------------------------------------
    *@
    <a name="addtoyourpages"></a>
    <h2>2. Add JSNLog to your pages</h2>

    <p>
        Call JSNLog's
        @Html.ViewLink("javascriptlogging-configure", "Configure")
        method in your pages, before any script tags that load JavaScript
        that use JSNLog loggers.
    </p>
    <ul>
        <li>
            <b>For Razor (MVC3+)</b>, use:
<pre>@@Html.Raw(JSNLog.JavascriptLogging.Configure())
... your &lt;script&gt; tags</pre>
            <p>
                Your _Layout.cshtml or _Layout.vbhtml would probably be a good place for this.
            </p>
        </li>
        <li>
            <b>For WebForms</b>, use:
<pre>&lt;%= JSNLog.JavascriptLogging.Configure() %&gt;
... your &lt;script&gt; tags</pre>
            <p>
                Your master page would probably be a good place for this.
            </p>
        </li>
    </ul>

    <h2>3. Feedback</h2>
    <p>
        Any praise, constructive criticism or ideas for improvement are welcome. Please leave it
        <a href="https://github.com/mperdeck/jsnlog/issues?state=open">here</a>.
    </p>
    <p>
        <h2>
            4. @Html.ViewLink("getstartedlogging", "Start logging >>")
        </h2>
    </p>
}

    @*====================================================================================================*@
    @* JS Only *@
    @*====================================================================================================*@

    @if (currentVersion == "JsOnly")
    {
        <p>
            @{
        Uri url = HttpContext.Current.Request.Url;
        string netJsUrl = PageVersions.UrlWithVersionUrlName(url, "netjs");
            }

            <small>If you use .Net, <a href="@netJsUrl">click here</a>.</small>
        </p>

        <p>
            Firstly, <a href="@SiteConstants.DownloadLinkJsnlogJs" target="_blank">download jsnlog.js</a> and add it to your site.
        </p>

        <p>
            The second step is to let your server receive log messages from jsnlog.js. Two things are in play here:
        </p>
        <ol>
            <li>The URL where you will receive log messages;</li>
            <li>The format of the log messages.</li>
        </ol>

        <h2>URL where you will receive log messages</h2>

        <p>
            The built in AJAX appender by default sends all log messages to this url:
        </p>
        <pre>@SiteConstants.DefaultDefaultAjaxUrl</pre>

        <p>
            You can change this using the
            <span class="term">defaultAjaxUrl</span>
            field in the 
JL
            @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
        </p>

        <h2>Format of the log messages</h2>
        <p>
            The AJAX appender sends log requests with:
        </p>
        <ul>
            <li>
                A JSON string containing most of the log data;
            </li>
            <li>
                A <a href="#requestheader">request header @SiteConstants.HttpHeaderRequestIdName containing the request id</a>.
            </li>
        </ul>

        <h3>JSON string</h3>
        <p>
            The JSON string has this format:
        </p>

        <pre>{
    r:  "request id", // Obsolete. May be empty string.
    lg: [
        { l: level, m: 'message', n: 'logger name', t: timestamp },
        ...
    ]
}</pre>

        <p>
            Please note that:
        </p>
        <ul>
            <li class="large-items">
                The "r" field (containing the request id) will only contain a request id if the request id has been set
                (using the JL
                @Html.ViewLink("jsnlogjs-jl-setOptions")<text>).</text>
                Otherwise it contains the empty string.
                <p />
                As of version 2.6.6, this field is obsolete, and only present for backward compatability. Use the
                <a href="#requestheader">@SiteConstants.HttpHeaderRequestIdName request header</a>
                instead.
            </li>
            <li>
                A single JSON message to the server can contain multiple log messages. This is because the AJAX appender can be configured
                to batch messages, for example 2 log messages per JSON message to the server.
            </li>
        </ul>
        <p>
            About the individual fields:
        </p>
        <table class="border">
            <tr valign="top">
                <th>Field</th>
                <th>Description</th>
            </tr>
            <tr>
                <td valign="top">
                    request id
                </td>
                <td>
                    Identifies the current request. You can set this on the server while generating the page using the JL
                    @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
                    <p />
                    Use this feature to see which log message belong to the same request.
                    This feauture is optional, so no need to worry about it.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    level
                </td>
                <td>
                    Severity of the log message. This is a number. See below.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    message
                </td>
                <td>
                    Message to be logged.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    logger&nbsp;name
                </td>
                <td>
                    Name of the logger.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    timestamp
                </td>
                <td>
                    The time the message was logged by your JavaScript.
                    This is the number of milliseconds since 1 January 1970 00:00:00 UTC, according to the client machine's clock.
                </td>
            </tr>
        </table>

        <p>
            Levels translate to the more common TRACE, DEBUG, ..., FATAL as follows:
        </p>

        <table class="border">
            <tr valign="top">
                <th>Named Severity</th>
                <th>Level</th>
            </tr>
            <tr>
                <td valign="top">
                    TRACE
                </td>
                <td>
                    1000
                </td>
            </tr>

            <tr>
                <td valign="top">
                    DEBUG
                </td>
                <td>
                    2000
                </td>
            </tr>

            <tr>
                <td valign="top">
                    INFO
                </td>
                <td>
                    3000
                </td>
            </tr>

            <tr>
                <td valign="top">
                    WARN
                </td>
                <td>
                    4000
                </td>
            </tr>

            <tr>
                <td valign="top">
                    ERROR
                </td>
                <td>
                    5000
                </td>
            </tr>

            <tr>
                <td valign="top">
                    FATAL
                </td>
                <td>
                    6000
                </td>
            </tr>
        </table>

        <a id="requestheader"></a>
        <h3>@SiteConstants.HttpHeaderRequestIdName request header with request id</h3>

        <p>
            The request id is used to identify all log requests that were generated by the same user.
            To use this facility, set the request id in your JavaScript after the page has loaded to some unique string, using
            the JL
            @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
        </p>
        <p>
            The jsnlog.js library then includes that request id in all log requests.
        </p>
        <p>
            If you don't set the request id, jsnlog.js uses the empty string.
        </p>
        <p>
            The request id is sent in a custom HTTP request header, @SiteConstants.HttpHeaderRequestIdName. This way,
            server side code can easily determine whether a request is a log request from jsnlog.js, or some other request (such as a simple page request).
        </p>
    }

