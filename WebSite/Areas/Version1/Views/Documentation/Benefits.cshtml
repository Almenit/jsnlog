@{
    ViewBag.Title = "JSNLog - Benefits";
}

<h1>Benefits</h1>
<p>
JSNLog makes it easy to catch and investigate errors in your client side JavaScript.
</p>
<p>
You probably use a server side logging package
(<a href="http://nlog-project.org/" target="_blank">NLog</a>,
<a href="http://logging.apache.org/log4net/" target="_blank">Log4Net</a>, etc.)
to log exceptions in your C# or Visual Basic code, 
and to find out what's going on inside your code.
You'll probably configure your loggers in your web.config or via a configuration file - setting logger levels, 
determining where log messages get stored, etc.
</p>


<p>
With more and more functionality running in the browser instead of the server,
we need the same logging goodness in our JavaScript code.
However,
traditionally, logging packages for JavaScript
haven't allowed you to configure the JavaScript loggers from your web.config.
And you had to write code to capture their logging output and store it on the server.
</p>

<p>
What's more, traditional JavaScript logging packages didn't take into account that
creating a log entry client side is relatively expensive, because it needs to be sent
over the Internet.
</p>

<p>
JSNLog (JavaScript .Net Logging) changes all this:
<ul>
<li>
Insert loggers in your JavaScript.
</li>
<li>
Log any object, not just strings.
</li>
<li>
Configure your JavaScript loggers in your web.config.
</li>
<li>
Capture the output from your JavaScript loggers on your server, and pass it on to your server side logging package
for storage - without writing code.
</li>
<li>
Reduce the number of requests being sent to your server, for example through batching.
</li>
<li>
Filter log messages not only by severity level, but also for example by user agent.
For example, switch on a logger only if the client runs IE 7.
</li>
</ul>
</p>

<p>
@Html.ActionLink("Installation", "Install", "Documentation") &gt;&gt;
</p>
