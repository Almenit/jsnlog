@{
    ViewBag.Title = "JSNLog - JavaScript Functions";
}

<h1>JavaScript Functions</h1>

<p>
When using JSNLog, you can use these functions in your JavaScript code to log messages and other objects.
</p>

<h2><a name="js-getLogger"></a>getLogger</h2>

<p>
Gets a reference to a logger. If the logger does not yet exist, it will be created.
</p>

<pre>
jsnlog.getLogger(loggerName);
</pre>

<h3>Parameters</h3>
<dl>
<dt>loggerName</dt>
<dd>
Type: string
<p />
The name of the logger.
</dd>
</dl>

<h3>Return Value</h3>
<p>
Type: logger
</p>
<p>
A reference to the logger with the given name.
</p>

<h3>Example</h3>
<pre>
var logger = jsnlog.getLogger(
    "yForms.Validators.IsNumeric.exceptionHandler");
</pre>

<a name="recommendednaming"></a>
<h3>Recommended naming</h3>
<p>
Although you can use any naming scheme for your loggers, it tends to make sense to use this structure:
<blockquote>
namespace.objecttype.methodname.location within method
</blockquote>
</p>
<p>
This makes it immediately clear where in your code the logger is located. For example: 
</p>
<pre>
// Create namespace
var yForms = yForms || {};

// Create Validators object constructor within namespace yForms
yForms.Validators = function() {};

// Create IsNumeric method on the Validators object
yForms.Validators.prototype.IsNumeric = function(inputValue) {
    try {
        ...
    } catch(err) {
        // Get the logger yForms.Validators.IsNumeric.exceptionHandler 
        // and log a fatal message 
        <b>jsnlog.getLogger("yForms.Validators.IsNumeric.exceptionHandler"
            ).fatal(err.message);</b>
    }
}
</pre>
<p>
Obviously, if you do not have namespaces or objects, you could have logger names without those elements.
</p>

<a name="inheritance"></a>
<h3>Appender and level inheritance</h3>

<p>
So that you do not have to configure an appender and level for every single logger,
a logger inherits the level and appenders from its parent. This uses the same scheme as 
<a href="http://logging.apache.org/log4net/" target="_blank">Log4Net</a>.
</p>
<p>
JSNLog works out the parent of a logger by taking away one level of its name. This means that:
</p>
<ul>
<li>
The parent of <i>yForms.Validators.IsNumeric.exceptionHandler</i> is <i>yForms.Validators.IsNumeric</i>
</li>
<li>
The parent of <i>yForms.Validators.IsNumeric</i> is <i>yForms.Validators</i>
</li>
<li>
The parent of <i>yForms.Validators</i> is <i>yForms</i>
</li>
</ul>
<p>
The parent of <i>yForms</i> is a special logger, called the root logger. However, apart from the fact that this root logger
has no parent and no name, it 
can still be <a href="#js-getRootLogger">used</a> and configured as a normal logger.
</p>


<h2><a name="js-getRootLogger"></a>getRootLogger</h2>

<p>
Returns a reference to the root logger.
</p>

<pre>
jsnlog.getRootLogger();
</pre>

<h3>Parameters</h3>
<p>None</p>

<h3>Return Value</h3>
<p>
Type: logger
</p>
<p>
A reference to the root logger.
</p>

<h3>Example</h3>
<pre>
var rootLogger = jsnlog.getRootLogger();
</pre>

<h3>Remarks</h3>
<p>
Normally, it makes sense to only use named loggers, because:
<ul>
<li>
this allows you to configure each logger individually; and
 </li>
<li>
helps
you identify the exact location in your code where a log message was generated.
</li>
</ul>
</p>

<p>
However, if you decide to use only one logger, you could use the root logger. 
</p>

<h2><a name="js-trace"></a>trace</h2>

<p>
Gets a logger to send a message with severity TRACE.
</p>

<pre>
logger.trace(message);
</pre>

<h3>Parameters</h3>
<dl>
<dt>message</dt>
<dd>
Type: object
<p />
Message to be sent. This can be any object, so doesn't have to be a string.
</dd>
</dl>

<h3>Return Value</h3>
<p>
None
</p>


<h3>Example</h3>
<pre>
var logger = jsnlog.getLogger(
    "yForms.Validators.IsNumeric.exceptionHandler");
logger.trace("Something interesting happened");
</pre>
<p>
Or shorter:
</p>
<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").trace(
    "Something interesting happened");
</pre>
<p>
You can also send an object. JSNLog will produce a message showing the values of its fields:
</p>
<pre>
var myValidator = new Validator(); 
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").trace(
    myValidator);
</pre>

<h2><a name="js-debug"></a>debug</h2>

<p>
Similar to method <i>trace</i>, but sends a message of severity DEBUG.
</p>
<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").debug(
    "Something interesting happened");
</pre>

<h2><a name="js-info"></a>info</h2>

<p>
Similar to method <i>trace</i>, but sends a message of severity INFO.
</p>
<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").info(
    "Something interesting happened");
</pre>

<h2><a name="js-warn"></a>warn</h2>

<p>
Similar to method <i>trace</i>, but sends a message of severity WARN.
</p>
<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").warn(
    "Something interesting happened");
</pre>

<h2><a name="js-error"></a>error</h2>

<p>
Similar to method <i>trace</i>, but sends a message of severity ERROR.
</p>
<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").error(
    "Something interesting happened");
</pre>

<h2><a name="js-fatal"></a>fatal</h2>

<p>
Similar to method <i>trace</i>, but sends a message of severity FATAL.
</p>
<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.interesting").fatal(
    "Something interesting happened");
</pre>

<h2><a name="js-time"></a>time</h2>

<p>
Starts a timer. 
When the timer is ended with a call to 
<a href="#js-timeEnd">timeEnd</a>
 using the same timer name, 
the amount of time that has elapsed in milliseconds since the timer was started is logged.
</p>

<pre>
logger.time(timerName, messageLevel)
</pre>

<h3>Parameters</h3>
<dl>
<dt>timerName</dt>
<dd>
Type: string
<p />
Name assigned to the newly created timer.
</dd>
<dt>messageLevel (optional)</dt>
<dd>
    Type: level
    <p />
    One of:
    <blockquote>
jsnlog.Level.TRACE<br />
jsnlog.Level.DEBUG<br />
jsnlog.Level.INFO (default)<br />
jsnlog.Level.WARN<br />
jsnlog.Level.ERROR<br />
jsnlog.Level.FATAL
    </blockquote>
    <p>
    The message sent by timeEnd will have this level.
    If you do not supply a level, jsnlog.Level.INFO is used.
    </p>
</dd>
</dl>

<h3>Return Value</h3>
<p>
None
</p>

<h3>Example</h3>

<p>
The following code uses a timer to measure how long a lengthy operation takes in milli seconds.
After the operation has finished, it sends a message with severity DEBUG with the measured time.
</p>
<p>
Keep in mind that in this case, the message will only be logged if the logger has level DEBUG or higher.
</p>

<pre>
jsnlog.getLogger("yForms.Validators.IsNumeric.timer1").time("timer1", 
    jsnlog.Level.DEBUG);

... lengthy operation ...

jsnlog.getLogger('yForms.Validators.IsNumeric.timer1').timeEnd('timer1');
</pre>

<h2><a name="js-timeEnd"></a>timeEnd</h2>

<p>
Ends a timer that was started by <a href="#js-time">time</a> and sends a message with the elapsed time.
</p>

<pre>
logger.timeEnd(timerName)
</pre>

<h3>Parameters</h3>
<dl>
<dt>timerName</dt>
<dd>
Type: string
<p />
Name of the timer as assigned by 
<a href="#js-time">time</a>.
</dd>
</dl>

<h3>Return Value</h3>
<p>None</p>

<h3>Example</h3>
<p>
See the example provided for 
<a href="#js-time">time</a>.
</p>

<h2><a name="js-assertEqual"></a>assertEqual</h2>

<p>
Compares two values using !=.
If they are equal, this does nothing. Otherwise,
it sends a message with severity ERROR.
</p>

<pre>
logger.assertEqual(v1, v2)
</pre>

<h3>Parameters</h3>
<dl>
<dt>v1, v2</dt>
<dd>
Type: any
<p/>
If these parameters are not equal, an ERROR log message is generated.
</dd>
</dl>

<h3>Return Value</h3>
<p>None</p>

<h3>Example</h3>

<pre>
var expectedValue = ....;
var actualValue = ....;

jsnlog.getLogger('yForms.Validators.IsNumeric.AssertPositive'
    ).assertEqual(expectedValue, actualValue);
</pre>


